daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;


	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;
		client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    <% if ENV['CSP_NONCE_ID'] %>
    set_secure_random_alphanum $cspNonce 32;
    sub_filter_once off;
    sub_filter_types *;
    sub_filter '<%= ENV['CSP_NONCE_ID'] %>' '$cspNonce';
    <% end %>

    location / {
      proxy_pass <%= 'http://' + ENV['ROUTE_TO_URL'].sub(%r{^[a-z]+://}, '').sub(%r{/+}, '') + '/' %>;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      <% if ENV['CSP_NONCE_ID'] %>
      proxy_set_header Accept-Encoding "";
      <% end %>

      <% if ENV['HIDE_GITHUB_HEADERS'].to_i == 1 %>
      proxy_hide_header X-GitHub-Request-Id;
      proxy_hide_header X-Fastly-Request-ID;
      proxy_hide_header X-Served-By;
      proxy_hide_header X-Cache;
      proxy_hide_header X-Cache-Hits;
      proxy_hide_header X-Timer;
      proxy_hide_header Via;
      proxy_hide_header Age;
      proxy_hide_header Server;
      proxy_hide_header Access-Control-Allow-Origin;
      <% end %>

      <% {
        'HTTP_REFERRER_POLICY' => 'strict-origin-when-cross-origin',
        'HTTP_PERMISSIONS_POLICY' => "accelerometer=(), autoplay=(), camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=(self), usb=()",
        'HTTP_X_CONTENT_TYPE_OPTIONS' => 'nosniff',
        'HTTP_X_PERMITTED_CROSS_DOMAIN_POLICIES' => 'none',
        'HTTP_X_DOWNLOAD_OPTIONS' => 'noopen',
        'HTTP_X_FRAME_OPTIONS' => 'SAMEORIGIN',
        'HTTP_X_XSS_PROTECTION' => '1; mode=block',
        'HTTP_STRICT_TRANSPORT_SECURITY' => 'max-age=63072000; includeSubDomains; preload',
        'HTTP_CONTENT_SECURITY_POLICY' => "default-src 'self'; style-src 'unsafe-inline' 'self'; font-src 'self' data:"
      }.merge(ENV.select { |name, _| name.start_with?('HTTP_') }).each do |header, value| %>
      add_header <%= header[5..-1].capitalize.gsub(/_./) { |letter| '-' + letter[1].upcase  } %> "<%= value.gsub('"', '\"') %>";
      <% end %>
    }
	}
}